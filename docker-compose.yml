---
version: '3.9'

services:
  angular-frontend:
    build:
      context: Front-PFE-develop
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    networks: ["app-network"]
    depends_on:
    - gateway-service
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9001:9000"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: ["app-network"]

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports: ["9092:9092"]
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks: ["app-network"]

  kafka-service:
    container_name: kafka-service
    build:
      context: Back-PFE-master-develop/kafka-service
      dockerfile: Dockerfile
    ports: [ "8081:8081" ]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_NAME: kafka-service
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
    depends_on:
      - broker
      - eureka-server
    networks: ["app-network"]
    restart: on-failure

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports: ["9411:9411"]
    networks: ["app-network"]

  postgres-user:
    image: postgres:13
    container_name: postgres-user
    ports: ["5432:5432"]
    environment:
      POSTGRES_DB: user-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes: ["postgres-user-data:/var/lib/postgresql/data"]
    networks: ["postgres-network"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-projet:
    image: postgres:13
    container_name: postgres-projet
    ports: ["5433:5432"]
    environment:
      POSTGRES_DB: proj_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes: ["postgres-projet-data:/var/lib/postgresql/data"]
    networks: ["postgres-network"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    build:
      context: Back-PFE-master-develop/eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports: ["8761:8761"]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_NAME: eureka-server
      SERVER_PORT: 8761
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: "false"
      EUREKA_SERVER_EVICTION_INTERVAL_TIMER_IN_MS: "5000"
    networks: ["app-network"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka-server:8761/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  gateway-service:
    build:
      context: Back-PFE-master-develop/gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports: ["8000:9090"]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_NAME: gateway-service
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      spring.cloud.discovery.enabled: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
    networks: ["app-network"]
    restart: on-failure

  auth-service:
    build:
      context: Back-PFE-master-develop/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports: ["9000:9000"]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_NAME: auth-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/user-service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      SECURITY_OAUTH2_RESOURCE_FILTER_ORDER: "3"
      SECURITY_SIGNING_KEY: "<signing-key>"
      spring.cloud.discovery.enabled: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - postgres-user
      - kafka-service
      - eureka-server
    networks: ["app-network", "postgres-network"]
    restart: on-failure
  user-service:
    build:
      context: Back-PFE-master-develop/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports: ["8085:8085"]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_NAME: user-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/user-service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      SECURITY_OAUTH2_RESOURCE_TOKEN_INFO_URI: http://auth-service:9000/oauth/check_token
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      spring.cloud.discovery.enabled: "true "
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - postgres-user
      - kafka-service
      - eureka-server
      - auth-service
    networks: ["app-network", "postgres-network"]
    restart: on-failure
  projet-service:
    build:
      context: Back-PFE-master-develop/projet-service
      dockerfile: Dockerfile
    container_name: projet-service
    ports: ["8082:8082"]
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_APPLICATION_NAME: projet-service
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-projet:5432/proj_service
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "true"
      EUREKA_CLIENT_FETCH_REGISTRY: "true"
      spring.cloud.discovery.enabled: "true"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - postgres-projet
      - kafka-service
      - eureka-server
      - auth-service 
    networks: ["app-network", "postgres-network"]
    restart: on-failure

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    ports: ["5050:80"]
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks: ["postgres-network"]

networks:
  app-network:
    driver: bridge
  postgres-network:
    driver: bridge

volumes:
  postgres-user-data:
  postgres-projet-data:
  pgadmin-data:
  portainer_data:
